import pandas as pd

from matplotlib import pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.ensemble import RandomForestRegressor
from procesing import procces_df, count_time
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.preprocessing.sequence import pad_sequences



if __name__ == '__main__':
   df_train1 = pd.read_csv('train_FD001.txt', delim_whitespace=True)
   df_train1 = procces_df(df_train1)

   df_test1 = pd.read_csv('test_FD001.txt', delim_whitespace=True)
   df_test1 = procces_df(df_test1)

   breakout_list = count_time(df_train1)





def custom_train_test_split(df, test_ratio):
     unique_units = df['unit number'].unique()
     num_test_units = int(len(unique_units) * test_ratio)

     num_test_units = min(num_test_units, len(unique_units))

     test_units = unique_units[:num_test_units]
     train_units = unique_units[num_test_units:]
     
     test = df[df['unit number'].isin(test_units)]
     train = df[df['unit number'].isin(train_units)]
     
     X_test_list, y_list_test = splitting(test, 'test')
     X_train, Y_train = splitting(train, 'train')
     print(f'y_test_list{y_list_test[0]}')

     return  X_train, X_test_list, Y_train, y_list_test


def splitting(df, type):
      
      if type == 'test2':


        
        X_test_list = []

        for unit in df['unit number'].unique():
             unit_data = df[df['unit number'] == unit]
             X_test_list.append(unit_data)
        return   X_test_list  

   
      X_list = []
      y_list = []
      num = 1

      for i in (df['unit number'].unique()):
                spectrum = breakout_list[i - 1] - np.random.randint(25, 80)
                filt = df['unit number'] == i
                df_filt = df[filt]
       

                x_todrop = df_filt['time'] <  spectrum
                y_todrop = df_filt['time'] >= spectrum
         

                x_filtered = df_filt[x_todrop]
                y_filtered = df_filt[y_todrop]

                y = y_filtered['time'].max()
                print(f'yyyyyyyyyyyyyyyy{y}')
                y_to_go = pd.Series([y] * x_filtered.shape[0], index=x_filtered.index)
                print(f'debugging y_to_go{y_to_go.max()}')

                X_list.append(x_filtered)
                y_list.append(y_to_go)
                print(num)
                num += 1
   
      X_comb = pd.concat(X_list, ignore_index=True)
      y_comb = pd.concat(y_list, ignore_index=True)

      if type == 'test':


        
        X_test_list = []

        for unit in X_comb['unit number'].unique():
             unit_data = X_comb[X_comb['unit number'] == unit]
             X_test_list.append(unit_data)

        print(f'debugging{y_list[0]}')
        y_list_mean = [(series.max()) for series in y_list]   
        print(f'y_list_mean{y_list_mean[0]}')   
        return X_test_list, y_list_mean 
      

      if type == 'train':
#        train
         return X_comb, y_comb

# if __name__ == '__main__':
# X, y = splitting(df_train1)

def pred_and_eve(model, test_list):
    
    y_pred_list = []

    for test in test_list:
            y_pred = model.predict(test)
            y_pred_list.append(np.mean(y_pred))

    return y_pred_list

def minmaxscaling_sequences(df, engines_range = 25):
     scaler = MinMaxScaler(feature_range=(0,1))
     features = df.columns.tolist()
     features.remove('unit number')
     features.remove('time')
     scaled_data = scaler.fit_transform(df[features])
     scaled_df_fake = pd.DataFrame(scaled_data)
     scaled_df = pd.concat([df['unit number'], df['time'],  scaled_df_fake], axis=1)
     scaled_df.columns = df.columns
     print(scaled_df)
     print(scaled_df.columns)
     print(scaled_df['unit number'])
           
     def create_sequences(data, engines_num):
          xs, ys = [], []
          
          for i in range(engines_num):
               filt = data['unit number'] == i
               data_filt = data[filt]
               print(data_filt)
               x = data_filt
               y = data_filt['time'].max()
               xs.append(x)
               ys.append(y)
          # print(xs)
          # print(ys)     
          return np.array(xs), np.array(ys)     

     return create_sequences(scaled_df, engines_range)


def LSTM_model(X_shape, y_shape):
     model = Sequential()
     model.add(LSTM(50, activation = 'relu', input_shape=(X_shape, y_shape)))
     model.add(Dense(1))
     model.compile(optimizer ='adam', loss = 'mse')

     return model


def model_fun(df):
   
   X_train, y_train = minmaxscaling_sequences(df, engines_range = 25)

   X_train_padded = pad_sequences(X_train, padding='post', maxlen = df['time'].max())
    
   model = LSTM_model(X_train_padded.shape[1], X_train_padded.shape[2])

   model_trained = model.fit(X_train, y_train, epochs = 20, batch_size = 32, validation_spit = 0.2)

   return model_trained


def evaluate_LSTM_model(model, X_test, y_test):
     y_pred = model.predict(X_test)
     mse = np.mean((y_test - y_pred) ** 2)
     r2 = r2_score(y_test, y_pred)
     print(f'Mean Squared Error: {mse}')
     print(f'R2 Score: {r2}')

     plt.scatter(y_test, y_pred)
     plt.xlabel('Actual Values')
     plt.ylabel('Predicted Values')
     plt.title('LSTM Model Predictions')
     plt.show()
     stop = input('press anything to stop')


model = model_fun(df_train1)
X_test, y_test= minmaxscaling_sequences(df = df_test1, engines_range = 25)
evaluate_LSTM_model(model = model, X_test = X_test, y_test = y_test )